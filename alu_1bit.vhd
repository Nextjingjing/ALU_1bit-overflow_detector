-- File: alu_1bit.vhd
-- Generated by MyHDL 0.11.49
-- Date: Fri Dec 20 23:59:30 2024


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_011.all;

entity alu_1bit is
    port (
        a: in unsigned(0 downto 0);
        b: in unsigned(0 downto 0);
        cin: in unsigned(0 downto 0);
        op: in unsigned(1 downto 0);
        less: in unsigned(0 downto 0);
        ainv: in unsigned(0 downto 0);
        binv: in unsigned(0 downto 0);
        result: out unsigned(0 downto 0);
        cout: out unsigned(0 downto 0)
    );
end entity alu_1bit;


architecture MyHDL of alu_1bit is



signal a_val: unsigned(0 downto 0);
signal and_res: unsigned(0 downto 0);
signal b_val: unsigned(0 downto 0);
signal carry_val: unsigned(0 downto 0);
signal or_res: unsigned(0 downto 0);
signal sum_val: unsigned(0 downto 0);

begin




ALU_1BIT_LOGIC: process (op, a_val, b, cin, carry_val, binv, sum_val, or_res, ainv, less, b_val, and_res, a) is
begin
    a_val <= tern_op(cond => bool(ainv), if_true => (not a), if_false => a);
    b_val <= tern_op(cond => bool(binv), if_true => (not b), if_false => b);
    sum_val <= ((a_val xor b_val) xor cin);
    carry_val <= (((a_val and b_val) or (b_val and cin)) or (a_val and cin));
    and_res <= (a_val and b_val);
    or_res <= (a_val or b_val);
    case op is
        when "00" =>
            result <= and_res;
        when "01" =>
            result <= or_res;
        when "10" =>
            result <= sum_val;
        when "11" =>
            result <= less;
        when others =>
            result <= to_unsigned(0, 1);
    end case;
    cout <= carry_val;
end process ALU_1BIT_LOGIC;

end architecture MyHDL;
